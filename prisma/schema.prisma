// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?
  role          UserRole  @default(CUSTOMER)
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  customer      Customer?
  supportAgent  SupportAgent?
  sessions      Session[]
  tickets       SupportTicket[] @relation("AssignedAgent")
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

// Customer Information
model Customer {
  id            String    @id @default(uuid())
  userId        String    @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  ssnEncrypted  String?   // Encrypted SSN
  phone         String?
  address       Json?
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  policies      Policy[]
  tickets       SupportTicket[]
}

// Support Agent Information
model SupportAgent {
  id            String    @id @default(uuid())
  userId        String    @unique
  firstName     String
  lastName      String
  department    String
  specialization String[]
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
}

// Insurance Policies
model Policy {
  id              String    @id @default(uuid())
  customerId      String
  policyNumber    String    @unique
  planType        PlanType
  status          PolicyStatus @default(ACTIVE)
  effectiveDate   DateTime
  expirationDate  DateTime
  premiumAmount   Decimal
  deductible      Decimal
  coverageDetails Json
  createdAt       DateTime  @default(now())
  
  // Relations
  customer        Customer  @relation(fields: [customerId], references: [id])
  claims          Claim[]
}

// Insurance Claims
model Claim {
  id              String    @id @default(uuid())
  policyId        String
  claimNumber     String    @unique
  status          ClaimStatus @default(SUBMITTED)
  claimType       String
  incidentDate    DateTime
  submittedDate   DateTime  @default(now())
  totalAmount     Decimal
  approvedAmount  Decimal?
  description     String?
  createdAt       DateTime  @default(now())
  
  // Relations
  policy          Policy    @relation(fields: [policyId], references: [id])
  documents       Document[]
}

// Support Tickets
model SupportTicket {
  id              String    @id @default(uuid())
  customerId      String
  assignedAgentId String?
  subject         String
  description     String
  priority        TicketPriority @default(MEDIUM)
  status          TicketStatus @default(OPEN)
  channel         SupportChannel
  createdAt       DateTime  @default(now())
  resolvedAt      DateTime?
  
  // Relations
  customer        Customer  @relation(fields: [customerId], references: [id])
  assignedAgent   User?     @relation("AssignedAgent", fields: [assignedAgentId], references: [id])
  messages        Message[]
  documents       Document[]
}

// Support Messages
model Message {
  id              String    @id @default(uuid())
  ticketId        String
  senderId        String
  content         String
  createdAt       DateTime  @default(now())
  
  // Relations
  ticket          SupportTicket @relation(fields: [ticketId], references: [id])
}

// Document Storage
model Document {
  id              String    @id @default(uuid())
  entityType      EntityType
  entityId        String
  fileName        String
  fileSize        Int
  mimeType        String
  s3Key           String
  uploadedById    String
  createdAt       DateTime  @default(now())
  
  // Relations
  claim           Claim?         @relation(fields: [entityId], references: [id], map: "Document_claim_fkey")
  ticket          SupportTicket? @relation(fields: [entityId], references: [id], map: "Document_ticket_fkey")
}

// Enums
enum UserRole {
  CUSTOMER
  AGENT
  ADMIN
  MANAGER
}

enum PlanType {
  INDIVIDUAL
  FAMILY
  GROUP
  MEDICARE
}

enum PolicyStatus {
  ACTIVE
  INACTIVE
  PENDING
  CANCELLED
}

enum ClaimStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  DENIED
  PENDING_INFO
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SupportChannel {
  EMAIL
  CHAT
  PHONE
  PORTAL
}

enum EntityType {
  CLAIM
  POLICY
  TICKET
} 