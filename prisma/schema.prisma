// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product Plans
model ProductPlan {
  id              String    @id @default(uuid())
  name            String
  description     String
  planType        PlanType
  coverageAmount  Decimal
  premiumAmount   Decimal
  deductible      Decimal
  features        Json
  status          String    @default("ACTIVE") // ACTIVE, DRAFT, ARCHIVED
  insurerId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  insurer         Insurer   @relation(fields: [insurerId], references: [id], onDelete: Restrict)
  policies        Policy[]
  benefits        PlanBenefit[]
  networkHospitals NetworkHospital[]

  @@index([planType])
  @@index([status])
  @@index([insurerId])
}

model PlanBenefit {
  id              String    @id @default(uuid())
  planId          String
  name            String
  description     String
  coverageAmount  Decimal
  waitingPeriod   Int?      // in days
  conditions      Json?
  status          String    @default("ACTIVE") // ACTIVE, INACTIVE
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  plan            ProductPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@index([planId])
  @@index([status])
}

model NetworkHospital {
  id              String    @id @default(uuid())
  planId          String
  hospitalId      String
  cashless        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  plan            ProductPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  hospital        Hospital    @relation(fields: [hospitalId], references: [id], onDelete: Restrict)

  @@index([planId])
  @@index([hospitalId])
}

model Hospital {
  id              String    @id @default(uuid())
  name            String
  address         Json
  specialties     String[]
  rating          Float?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  networkPlans    NetworkHospital[]

  @@index([name])
  @@index([specialties])
}

model Insurer {
  id              String    @id @default(uuid())
  name            String
  logo            String?
  rating          Float?
  establishedYear Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  plans           ProductPlan[]

  @@index([name])
  @@index([rating])
}

// User and Authentication
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String?
  role          UserRole  @default(CUSTOMER)
  mfaEnabled    Boolean   @default(false)
  mfaSecret     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  customer      Customer?
  supportAgent  SupportAgent?
  sessions      Session[]
  tickets       SupportTicket[] @relation("AssignedAgent")
  documents     Document[]
  coinWallet    CoinWallet?

  @@index([email])
  @@index([role])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([expires])
  @@index([userId])
}

// Customer Information
model Customer {
  id            String    @id @default(uuid())
  userId        String    @unique
  firstName     String
  lastName      String
  dateOfBirth   DateTime
  ssnEncrypted  String?   // Encrypted SSN
  phone         String?
  address       Json?
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  policies      Policy[]
  tickets       SupportTicket[]
  quotes        Quote[]
  payments      Payment[]
  comparisons   PlanComparison[]

  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([phone])
}

// Support Agent Information
model SupportAgent {
  id            String    @id @default(uuid())
  userId        String    @unique
  firstName     String
  lastName      String
  department    String
  specialization String[]
  createdAt     DateTime  @default(now())
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([firstName, lastName])
  @@index([department])
}

// Insurance Policies
model Policy {
  id              String    @id @default(uuid())
  customerId      String
  planId          String    // Reference to ProductPlan
  policyNumber    String    @unique
  status          PolicyStatus @default(ACTIVE)
  effectiveDate   DateTime
  expirationDate  DateTime
  premiumAmount   Decimal
  deductible      Decimal
  coverageDetails Json
  createdAt       DateTime  @default(now())
  
  // Relations
  customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Restrict)
  plan            ProductPlan @relation(fields: [planId], references: [id], onDelete: Restrict)
  claims          Claim[]
  payment         Payment?
  familyMembers   FamilyMember[]

  @@index([customerId])
  @@index([planId])
  @@index([status])
  @@index([effectiveDate])
  @@index([expirationDate])
  @@index([policyNumber])
}

// Family Members
model FamilyMember {
  id              String    @id @default(uuid())
  policyId        String
  firstName       String
  lastName        String
  relationship    String
  dateOfBirth     DateTime
  createdAt       DateTime  @default(now())
  
  // Relations
  policy          Policy    @relation(fields: [policyId], references: [id], onDelete: Cascade)

  @@index([policyId])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
}

// Insurance Claims
model Claim {
  id              String    @id @default(uuid())
  policyId        String
  claimNumber     String    @unique
  status          ClaimStatus @default(SUBMITTED)
  claimType       String
  incidentDate    DateTime
  submittedDate   DateTime  @default(now())
  totalAmount     Decimal
  approvedAmount  Decimal?
  description     String?
  createdAt       DateTime  @default(now())
  
  // Relations
  policy          Policy    @relation(fields: [policyId], references: [id], onDelete: Restrict)
  documents       Document[]

  @@index([policyId])
  @@index([status])
  @@index([claimNumber])
  @@index([incidentDate])
  @@index([submittedDate])
}

// Support Tickets
model SupportTicket {
  id              String    @id @default(uuid())
  customerId      String
  assignedAgentId String?
  subject         String
  description     String
  priority        TicketPriority @default(MEDIUM)
  status          TicketStatus @default(OPEN)
  channel         SupportChannel
  createdAt       DateTime  @default(now())
  resolvedAt      DateTime?
  
  // Relations
  customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Restrict)
  assignedAgent   User?     @relation("AssignedAgent", fields: [assignedAgentId], references: [id], onDelete: SetNull)
  messages        Message[]
  documents       Document[]

  @@index([customerId])
  @@index([assignedAgentId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([resolvedAt])
}

// Support Messages
model Message {
  id              String    @id @default(uuid())
  ticketId        String
  senderId        String
  content         String
  createdAt       DateTime  @default(now())
  
  // Relations
  ticket          SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([senderId])
  @@index([createdAt])
}

// Document Storage
model Document {
  id              String         @id @default(uuid())
  entityType      EntityType
  entityId        String
  fileName        String
  fileSize        Int
  mimeType        String
  s3Key           String
  uploadedById    String
  status          DocumentStatus @default(PENDING)
  hash            String?        // SHA-256 hash for deduplication
  scanResult      Json?         // Virus scan results
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  claim           Claim?         @relation(fields: [entityId], references: [id], map: "Document_claim_fkey", onDelete: Cascade)
  ticket          SupportTicket? @relation(fields: [entityId], references: [id], map: "Document_ticket_fkey", onDelete: Cascade)
  uploadedBy      User           @relation(fields: [uploadedById], references: [id], onDelete: Restrict)

  @@index([hash])
  @@index([status])
  @@index([entityType, entityId])
  @@index([uploadedById])
  @@index([createdAt])
  @@index([fileName])
}

// Coin Wallet and Transactions
model CoinWallet {
  id            String    @id @default(uuid())
  userId        String    @unique
  balance       Int       @default(0)
  totalEarned   Int       @default(0)
  totalSpent    Int       @default(0)
  lastUpdated   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  CoinTransaction[]
  redemptions   RewardRedemption[]

  @@index([userId])
  @@index([balance])
}

model CoinTransaction {
  id            String    @id @default(uuid())
  walletId      String
  type          String    // EARN, SPEND, REFUND
  amount        Int
  reason        String?   // SIGN_UP, DAILY_LOGIN, etc.
  metadata      Json?
  createdAt     DateTime  @default(now())
  
  // Relations
  wallet        CoinWallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([type])
  @@index([reason])
  @@index([createdAt])
}

model CoinEarnRule {
  id              String    @id @default(uuid())
  taskType        String    @unique // SIGN_UP, DAILY_LOGIN, etc.
  coinAmount      Int
  cooldownPeriod  Int       // in minutes
  maxPerDay       Int       @default(1)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([taskType])
  @@index([isActive])
}

// Rewards System
model RewardItem {
  id              String    @id @default(uuid())
  name            String
  description     String
  coinCost        Int
  category        String    // GIFT_CARD, PREMIUM_FEATURE, etc.
  stock           Int       @default(0)
  isAvailable     Boolean   @default(true)
  isActive        Boolean   @default(true)
  maxPerDay       Int       @default(1)
  redeemedCount   Int       @default(0)
  type            String    // DIGITAL, PHYSICAL
  imageUrl        String?
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  redemptions     RewardRedemption[]

  @@index([category])
  @@index([isAvailable])
  @@index([isActive])
  @@index([type])
  @@index([redeemedCount])
}

model RewardRedemption {
  id              String    @id @default(uuid())
  walletId        String
  rewardItemId    String
  coinsCost       Int
  quantity        Int       @default(1)
  status          String    @default("PENDING") // PENDING, FULFILLED, CANCELLED
  fulfillmentData Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  wallet          CoinWallet  @relation(fields: [walletId], references: [id], onDelete: Restrict)
  rewardItem      RewardItem  @relation(fields: [rewardItemId], references: [id], onDelete: Restrict)

  @@index([walletId])
  @@index([rewardItemId])
  @@index([status])
  @@index([createdAt])
}
